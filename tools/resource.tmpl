package netscaler

import (
        "github.com/chiradeep/go-nitro/config/{{.Package}}"
        {{if neq .BindingPkg "" -}}
        "github.com/chiradeep/go-nitro/config/{{.BindingPkg}}"
        {{- end}}
	"github.com/chiradeep/go-nitro/netscaler"
	"github.com/hashicorp/terraform/helper/resource"
	"github.com/hashicorp/terraform/helper/schema"

	"fmt"
	"log"
)


func resourceNetScaler{{.TfTitle}}() *schema.Resource {
	return &schema.Resource{
		SchemaVersion: 1,
                Create:        create{{.TfTitle}}Func,
                Read:          read{{.TfTitle}}Func,
                Update:        update{{.TfTitle}}Func,
                Delete:        delete{{.TfTitle}}Func,
		Schema: map[string]*schema.Schema{
                       {{ range $key, $value := .Fields -}}
                               "{{$key}}": &schema.Schema{
                               Type:     schema.Type{{$value}},
			       Optional: true,
                               Computed: true,
			},
                        {{end}}
                        {{if neq .BindingPkg "" -}}
                        "{{.BindingName}}": &schema.Schema{
				Type:     schema.TypeString,
				Required: true,
			},
                        {{- end}}
		},
	}
}

func create{{.TfTitle}}Func(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*NetScalerNitroClient).client
        var {{.TfID}} string
	if v, ok := d.GetOk("name"); ok {
             {{.TfID}} = v.(string)
	} else {
             {{.TfID}}= resource.PrefixedUniqueId("tf-{{.TfName}}-")
             d.Set("name", {{.TfID}})
	}
        {{.TfName}} := {{.Package}}.{{.StructName}}{
                Name:            {{.TfID}},
                {{ range $key, $value := .Fields -}}
                {{if neq $key "name" -}}
                {{$key|title}}:           d.Get("{{$key}}").({{$value|lower}}),
                {{end -}}
                {{end}}
	}

        _, err := client.AddResource(netscaler.{{.StructName}}.Type(), {{.TfID}}, &{{.TfName}})
	if err != nil {
		return err
	}

        d.SetId({{.TfID}})
        {{if neq .BindingPkg "" -}}
        {{.BindingName}} := d.Get("{{.BindingName}}").(string)

        binding := {{.BindingPkg}}.{{.BindingType}}{
                Name:        {{.BindingName}},
                {{.TfTitle}}name: {{.TfID}},
	}

        err = client.BindResource(netscaler.{{.BoundType}}.Type(), {{.BindingName}}, netscaler.{{.StructName}}.Type(), {{.TfID}}, &binding)
	if err != nil {
		return err
	}
        {{- end}}
        err = read{{.TfTitle}}Func(d, meta)
	if err != nil {
                log.Printf("?? we just created this {{.TfName}} but we can't read it ?? %s", {{.TfID}})
		return nil
	}
	return nil
}

func read{{.TfTitle}}Func(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*NetScalerNitroClient).client
        {{.TfID}}:= d.Id()
        log.Printf("Reading {{.TfName}} state %s", {{.TfID}})
        data, err := client.FindResource(netscaler.{{.StructName}}.Type(), {{.TfID}})
	if err != nil {
        log.Printf("Clearing {{.TfName}} state %s", {{.TfID}})
		d.SetId("")
		return nil
	}
	d.Set("name", data["name"])
        {{ range $key, $value := .Fields -}}
        d.Set("{{$key}}", data["{{$key}}"])
        {{end}}

	return nil

}

func update{{.TfTitle}}Func(d *schema.ResourceData, meta interface{}) error {
	log.Printf("[DEBUG] In update func")
	client := meta.(*NetScalerNitroClient).client
        {{.TfID}} := d.Get("name").(string)

        {{.TfName}} := {{.Package}}.{{.StructName}}{
		Name: d.Get("name").(string),
	}
        {{range $key, $value := .Fields -}}
        if d.HasChange("{{$key}}") {
                log.Printf("[DEBUG] {{$key|title}} has changed for {{$.TfName}} %s, starting update", {{$.TfID}})
                {{$.TfName}}.{{$key|title}} = d.Get("{{$key}}").({{$value|lower}})
	}
        {{end}}

        _, err := client.UpdateResource(netscaler.{{.StructName}}.Type(), {{.TfID}}, &{{.TfName}})
	if err != nil {
        return fmt.Errorf("Error updating {{.TfName}} %s", {{.TfID}})
	}
        return read{{.TfTitle}}Func(d, meta)
}

func delete{{.TfTitle}}Func(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*NetScalerNitroClient).client
        {{.TfID}} := d.Id()
        err := client.DeleteResource(netscaler.{{.StructName}}.Type(), {{.TfID}})
	if err != nil {
		return err
	}

	d.SetId("")

	return nil
}
